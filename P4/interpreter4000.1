#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 9 #"Consolas\0"
0 10 90 -1 90 -1 1 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 248 248 242 39 40 34 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 174 129 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 253 151 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 102 217 239 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 248 248 242 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 38 114 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 117 113 94 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 230 219 116 0 0 0 -1 -1 2
35 #"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 174 129 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 226 46 0 0 0 -1 -1 2
42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 102 217 239 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 253 151 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 226 46 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 253 151 31 0 0 0 -1 -1 2
47 #"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 248 248 242 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 6905 0 28 3 17 #"#lang racket/load"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"load"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"lex.scm\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"load"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"classParser.scm\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";Team: Callum Grant (chg33), Jiawei Wu (jxw585), John Donnelly (jed1"
 #"26)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";-------------------------start-----------------------------"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";usage: ex: (interpret \"test1.txt\")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"interpret"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"filename"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"return"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parser"
0 0 24 3 1 #" "
0 0 14 3 8 #"filename"
0 0 24 3 2 #") "
0 0 14 3 8 #"newstate"
0 0 24 3 1 #" "
0 0 14 3 8 #"newbreak"
0 0 24 3 1 #" "
0 0 14 3 11 #"newcontinue"
0 0 24 3 1 #" "
0 0 14 3 8 #"newthrow"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"interpret2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"filename"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"interpreter"
0 0 24 3 1 #" "
0 0 14 3 8 #"filename"
0 0 24 3 1 #" "
0 0 14 3 8 #"newstate"
0 0 24 3 1 #" "
0 0 14 3 8 #"newbreak"
0 0 24 3 1 #" "
0 0 14 3 11 #"newcontinue"
0 0 24 3 1 #" "
0 0 14 3 8 #"newthrow"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 152
(
 #";Interpretation method, runs through each sublist within the list of"
 #" lists returned by parser, effectively going through the original te"
 #"xt line-by-line."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"interpreter"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parsed"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 30 #";intializing a state variable "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"parsed"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 17 3 36 #";if parsed to the end, evaluate main"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 7 #"layered"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"parsed"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 7 #"perform"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"parsed"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")) "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 5 #"pair?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"parsed"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"parsed"
0 0 24 3 3 #") ("
0 0 14 3 7 #"perform"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"parsed"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 2 #") "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"parsed"
0 0 24 3 3 #") ("
0 0 14 3 7 #"perform"
0 0 24 3 1 #" "
0 0 14 3 6 #"parsed"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 2 #") "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";-------------------------end-----------------------------"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";initializations"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"newstate"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 7 #"(()()))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"newbreak"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"newcontinue"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"newthrow"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"No catch\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";helper to determine whether a state is layered (currently in a bloc"
 #"k)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"layered"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"void?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";helpers for state operations"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"extract"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"extract"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"remain"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"remain"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"m_insert"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"layered"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"m_insert"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"m_insert_func"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 98
(
 #"; m_remove has a bug in second inner list that requires a flatten, m"
 #"aybe to be fixed for elegance?"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"flatten"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"flatten"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 7 #"flatten"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"m_remove"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"layered"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"m_remove"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"remain"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 7 #"extract"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 8 #"m_remove"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"remain"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 7 #"))))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"extract"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 8 #"m_remove"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"remain"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      ))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";Finds the value of a variable of a given name within our state."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"lookup"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"layered"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 24 #";((void? s) \"undefined\")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")) "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"unbox"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 32 #";(else (lookup name (remain s)))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"remain"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getrootlayer"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";the lookup version that returns the box rather than the value"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"lookupbox"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"layered"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 24 #";((void? s) \"undefined\")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")) "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"caadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lookupbox"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"remain"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"lookupbox"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"lookupbox"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"lookupbox"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";lookup cdr until state where func is declread in"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"lookupforfunc"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 8 #"funcname"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"layered"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 24 #";((void? s) \"undefined\")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")) "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"unbox"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 32 #";(else (lookup name (remain s)))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"remain"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 8 #"inscope?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 15 #"locate_func_var"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 8 #"funcname"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"locate_func_var"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 8 #"funcname"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"layered"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 8 #"inscope?"
0 0 24 3 1 #" "
0 0 14 3 8 #"funcname"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 7 #")))    "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 15 #"locate_func_var"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 8 #"funcname"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";return the state where the func is defined in"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";(define func_state"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";  (lambda (func_name allstate)"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";    (if (inscope? func_name allstate)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";      (car state)"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";      (func_state func_name (cdr state))"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";    )"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";  )"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(define isfunc"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";  (lambda (name s)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";    (> (howmany (lookup name s)) 1)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";  )"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; Assigns a value to a variable, and modifies our state accordingly."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"m_state"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"Use before declaration\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"layered"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 8 #"set-box!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lookupbox"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))) "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 8 #"set-box!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lookupbox"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #")) "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"m_state_funcscope"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"null"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"m_state"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lookupforfunc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #") "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"Use before declaration\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"layered"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 8 #"set-box!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lookupbox"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")) "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 8 #"set-box!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lookupbox"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")) "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"set_func_scope"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"funcname"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 8 #"set-box!"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 8 #"funcname"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")) "
0 0 14 3 5 #"scope"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";manually update a state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"m_manual_state"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"Use before declaration\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"layered"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 8 #"set-box!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lookupbox"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))) "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 8 #"set-box!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lookupbox"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")) "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; Declares a given variable"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; (var x) or (var x 3)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"m_declare"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"layered"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 14 #"def_with_value"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 17 3 54 #";parse \"var x (things)\" (what about declare booleans?)"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 8 #"def_null"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 17 3 19 #";else parse \"var x\""
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 19 #"\"not valid declare\""
0 0 24 29 1 #"\n"
0 0 24 3 11 #"        ) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 14 #"def_with_value"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 17 3 54 #";parse \"var x (things)\" (what about declare booleans?)"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 8 #"def_null"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 17 3 19 #";else parse \"var x\""
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 19 #"\"not valid declare\""
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";declare a variable in current layer specifically (Do we really need"
 #" it?)"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"m_declare_inscope"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 20 #"def_with_value_local"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 17 3 54 #";parse \"var x (things)\" (what about declare booleans?)"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 14 #"def_null_local"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 17 3 19 #";else parse \"var x\""
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           )"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 19 #"\"not valid declare\""
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         )"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       )"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #"; If the defined variable is defined with a value, this helper assig"
 #"ns it a value."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 14 #"def_with_value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 4 #")) ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"no re-declaring\""
0 0 24 3 3 #") ("
0 0 14 3 1 #"s"
0 0 24 3 4 #"))) "
0 0 17 3 16 #";no re-declaring"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"m_insert"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 20 #"def_with_value_local"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")) "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 4 #")) ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"no re-declaring\""
0 0 24 3 3 #") ("
0 0 14 3 1 #"s"
0 0 24 3 4 #"))) "
0 0 17 3 16 #";no re-declaring"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"m_insert"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 13 #"def_with_func"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 4 #")) ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"no re-declaring\""
0 0 24 3 3 #") ("
0 0 14 3 1 #"s"
0 0 24 3 4 #"))) "
0 0 17 3 16 #";no re-declaring"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_insert_func"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 14 #"def_null_local"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")) "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 4 #")) ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"no re-declaring\""
0 0 24 3 3 #") ("
0 0 14 3 1 #"s"
0 0 24 3 4 #"))) "
0 0 17 3 16 #";no re-declaring"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"m_insert"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"null"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; If the defined variable has no value, this helper sets it up with "
 #"a null value."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 8 #"def_null"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 4 #")) ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"no re-declaring\""
0 0 24 3 3 #") ("
0 0 14 3 1 #"s"
0 0 24 3 4 #"))) "
0 0 17 3 16 #";no re-declaring"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"m_insert"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"null"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";Modified version of the basic expression evaluator from class."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"m_value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 45 #";(if (layered s) (m_value expression (car s))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"null"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"null"
0 0 24 3 2 #") "
0 0 17 3 34 #";for declaration of a new variable"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 3 #") ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 10 #"expression"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 10 #"expression"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"function"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"m_declare_func"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))  "
0 0 17 3 10 #";Functions"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"funcall"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"m_call_func"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 5 #"class"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 15 #"m_declare_class"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 1 #" "
0 0 14 3 8 #"operand2"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_state"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"quotient"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"%"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"remainder"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"=="
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"!="
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"&&"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"!"
0 0 24 3 2 #" ("
0 0 14 3 11 #"logicsymbol"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 2 #";)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";name tracking version"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"m_value_scope"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 51 #";(if (layered s) (m_value_scope expression (car s))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"null"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"null"
0 0 24 3 2 #") "
0 0 17 3 34 #";for declaration of a new variable"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lookupforfunc"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #") "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 3 #") ("
0 0 14 3 13 #"lookupforfunc"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 10 #"expression"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 10 #"expression"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"function"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"m_declare_func"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))  "
0 0 17 3 10 #";Functions"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"funcall"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"m_call_func"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 1 #" "
0 0 14 3 8 #"operand2"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 3 #") ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 17 #"m_state_funcscope"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #") "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"quotient"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"%"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"remainder"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"=="
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"!="
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"&&"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"!"
0 0 24 3 2 #" ("
0 0 14 3 11 #"logicsymbol"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 2 #";)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 123
(
 #"; Whilehandler addresses situations of the while loop. If the condit"
 #"ion is not met, it performs the clause and then recurs."
) 0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #"; state - the state. line - the line that the while occurs in (i.e. "
 #"the segment enclosed by parentheses, starting with \"while\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 116
(
 #"; (cadr line) - gets the element that is second in the provided line"
 #", which should be the clause for the while loop."
) 0 0 24 29 1 #"\n"
0 0 17 3 109
(
 #"; (caddr line) gets the third element in the provided line, which sh"
 #"ould be the procedure for the while loop."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"whilehandler"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"break"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"whilehandler"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #" ("
0 0 14 3 7 #"call/cc"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"continue"
0 0 24 3 3 #") ("
0 0 14 3 7 #"perform"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"whilehandler_scope"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"break"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 18 #"whilehandler_scope"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #" ("
0 0 14 3 7 #"call/cc"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"continue"
0 0 24 3 3 #") ("
0 0 14 3 7 #"perform"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";Abstractions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";prefix parser"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"operator"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"input"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"logicsymbol"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"input"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand1"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"input"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"input"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #";Performs the task of a given line, by calling the method that perta"
 #"ins to the line's opening."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"perform"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"        ( ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"var"
0 0 24 3 3 #") ("
0 0 14 3 9 #"m_declare"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"throw"
0 0 24 3 3 #") ("
0 0 14 3 12 #"throwhandler"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_state"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 38 #";return needs revamp (immediate break)"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"return"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"throw"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                    (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                    "
0 0 17 3 28 #";above line is for debugging"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                    (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"return"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 3 #") ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                    (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"return"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 3 #") ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 6 #"return"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 3 #") ("
0 0 14 3 9 #"ifhandler"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"while"
0 0 24 3 3 #") ("
0 0 14 3 12 #"whilehandler"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 12 #"blockhandler"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           ) "
0 0 17 3 16 #";block handler  "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 8 #"continue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"layered"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"Continue must be inside a block\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 60
#";if continue is encountered, restart the block it is within."
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"break"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 25 #";break must be in a block"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"layered"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"Break must be inside a block\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 64
#";if break is encountered, throw away current layer immediately, "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            ))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 19 #";try catch handling"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"try"
0 0 24 3 3 #") ("
0 0 14 3 10 #"tcfhandler"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 17 3 40 #";functions will be dealt here to M_value"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"perform_with_scope"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 28 #";state here is current scope"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"return"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"var"
0 0 24 3 3 #") ("
0 0 14 3 17 #"m_declare_inscope"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"throw"
0 0 24 3 3 #") ("
0 0 14 3 12 #"throwhandler"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 73
(
 #";x = a in a function scope, if x doesn't exist in func scope, goto g"
 #"lobal"
) 0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 3 #") ("
0 0 14 3 17 #"m_state_funcscope"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 38 #";return needs revamp (immediate break)"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"return"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"throw"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                    (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                    "
0 0 17 3 28 #";above line is for debugging"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                    (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"return"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 3 #") ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                    (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"return"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 3 #") ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 6 #"return"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 3 #") ("
0 0 14 3 15 #"ifhandler_scope"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"while"
0 0 24 3 3 #") ("
0 0 14 3 18 #"whilehandler_scope"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 12 #"blockhandler"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           ) "
0 0 17 3 16 #";block handler  "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 8 #"continue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"layered"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"Continue must be inside a block\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 60
#";if continue is encountered, restart the block it is within."
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"break"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 25 #";break must be in a block"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"layered"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"Break must be inside a block\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 64
#";if break is encountered, throw away current layer immediately, "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            ))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 19 #";try catch handling"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"try"
0 0 24 3 3 #") ("
0 0 14 3 10 #"tcfhandler"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")) "
0 0 17 3 40 #";functions will be dealt here to M_value"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 135
(
 #";Ifhandler - does its clause if the condition is met. If condition i"
 #"s not met, AND an else clause is present, performs the else clause."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"ifhandler"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 3 #") ("
0 0 14 3 7 #"perform"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")) "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"perform"
0 0 24 3 2 #" ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"ifhandler_scope"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"m_value_scope"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 3 #") ("
0 0 14 3 18 #"perform_with_scope"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")) "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 18 #"perform_with_scope"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";find the nth item in a list"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"itemn"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"itemn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";block is handled via continuation of break and continue"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"blockhandler"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"perform"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 5 #"break"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #"))) ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #"))) ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 5 #"throw"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"))) "
0 0 14 3 6 #"return"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 12 #"blockhandler"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 3 #") ("
0 0 14 3 7 #"perform"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 5 #"break"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #"))) ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #"))) ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 5 #"throw"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"))) "
0 0 14 3 6 #"return"
0 0 24 3 2 #") "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";try to perform in the scope"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"func_blockhandler"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 4 #")) ("
0 0 14 3 18 #"perform_with_scope"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 3 #")  "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 5 #"break"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #"))) ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #"))) ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 5 #"throw"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"))) "
0 0 14 3 6 #"return"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 17 #"func_blockhandler"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 3 #") ("
0 0 14 3 18 #"perform_with_scope"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 3 #")  "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 5 #"break"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #"))) ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #"))) ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 5 #"throw"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"))) "
0 0 14 3 6 #"return"
0 0 24 3 2 #") "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";--------------------------- sample solution --------------------"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"breakhandler"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 3 #") ("
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"continuehandler"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 3 #") ("
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"throwhandler"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"throw"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"tcfhandler"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"try-break"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 7 #"finally"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      (("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"finally-stmt"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #")) "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      (("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 12 #"finally-body"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 5 #"))) ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 12 #"finally-body"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"perform"
0 0 24 3 2 #" ("
0 0 14 3 12 #"finally-body"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 3 #"try"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 9 #"try-throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 8 #"try-body"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 7 #"finally"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 8 #"try-body"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 9 #"try-throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 7 #"finally"
0 0 24 3 2 #" ("
0 0 14 3 7 #"perform"
0 0 24 3 2 #" ("
0 0 14 3 8 #"try-body"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 9 #"try-throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 5 #"catch"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 10 #"catch-body"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 7 #"finally"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 12 #"replace*-cps"
0 0 24 3 2 #" ("
0 0 14 3 9 #"catch-err"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 14 3 10 #"catch-body"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 3 #")) "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 7 #"finally"
0 0 24 3 2 #" ("
0 0 14 3 7 #"perform"
0 0 24 3 2 #" ("
0 0 14 3 12 #"replace*-cps"
0 0 24 3 2 #" ("
0 0 14 3 9 #"catch-err"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 14 3 10 #"catch-body"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 3 #")) "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"try"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 9 #"try-break"
0 0 24 3 2 #" ("
0 0 15 3 5 #"catch"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 10 #")))) )))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"replace*-cps"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"old"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"pair?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"replace*-cps"
0 0 24 3 1 #" "
0 0 14 3 3 #"old"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 12 #"replace*-cps"
0 0 24 3 1 #" "
0 0 14 3 3 #"old"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 6 #"return"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 3 #"old"
0 0 24 3 3 #") ("
0 0 14 3 12 #"replace*-cps"
0 0 24 3 1 #" "
0 0 14 3 3 #"old"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 6 #"return"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"replace*-cps"
0 0 24 3 1 #" "
0 0 14 3 3 #"old"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 6 #"return"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 44 #"; (try body (catch (e) body) (finally body))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"try-body"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"catch-body"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 5 #")))  "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()  ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"catch-err"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"finally-stmt"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cdddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"finally-body"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cdddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";------------------------------------- Functions"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";functions would be stored as ((name) ())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";this will return the state layer with global vars and function defs"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"getrootlayer"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 12 #"currentlayer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 12 #"currentlayer"
0 0 24 3 2 #") "
0 0 14 3 12 #"currentlayer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 12 #"currentlayer"
0 0 24 3 3 #")) "
0 0 14 3 12 #"currentlayer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getrootlayer"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 12 #"currentlayer"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"  ))    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"getotherlayers"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 12 #"currentlayer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 12 #"currentlayer"
0 0 24 3 2 #") "
0 0 14 3 12 #"currentlayer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 12 #"currentlayer"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"currentlayer"
0 0 24 3 3 #") ("
0 0 14 3 14 #"getotherlayers"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 12 #"currentlayer"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"getfirstlayer"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 12 #"currentlayer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 12 #"currentlayer"
0 0 24 3 2 #") "
0 0 14 3 12 #"currentlayer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 12 #"currentlayer"
0 0 24 3 3 #")) "
0 0 14 3 12 #"currentlayer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"currentlayer"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 11 #"def_in_root"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 14 #"getotherlayers"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 15 3 13 #"def_with_func"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getrootlayer"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 12 #"def_in_scope"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"layered"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #")) ("
0 0 15 3 13 #"def_with_func"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 15 3 13 #"def_with_func"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";function is parsed as:"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";(function name (parameter) body)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"m_declare_func"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 12 #"def_in_scope"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 17 3 31 #";the name of the function/class"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"makeclosure"
0 0 24 3 2 #" ("
0 0 14 3 23 #"intialize_formal_params"
0 0 24 3 2 #" ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 9 #"(()())) ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 7 #"extends"
0 0 24 3 3 #") ("
0 0 14 3 11 #"makeclosure"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 8 #"(()()) ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"makeclosure"
0 0 24 3 2 #" ("
0 0 14 3 23 #"intialize_formal_params"
0 0 24 3 2 #" ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 9 #"(()())) ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ) "
0 0 17 3 83
(
 #";the function is stored as a closure with its scope, formal param li"
 #"st and its body"
) 0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";initializing the formal parameters to null in the function scope"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 23 #"intialize_formal_params"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lis"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lis"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 23 #"intialize_formal_params"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lis"
0 0 24 3 3 #") ("
0 0 15 3 8 #"def_null"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lis"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      ) "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";function construting the function closure that would be stored"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"makeclosure"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 9 #"paramlist"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 9 #"paramlist"
0 0 24 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 9 #"paramlist"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 9 #"paramlist"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";function call line would be parsed as '(funcall fib (- a 1))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"m_call_func"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"perform_func"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 2 #" ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 31 #";(set_func_scope (itemn line 2)"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 17 #"set_formal_params"
0 0 24 3 1 #" "
0 0 17 3 34 #";we evaluate the formal parameters"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 2 #" ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 5 #"state"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"unbox"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 2 #" ("
0 0 14 3 5 #"itemn"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 7 #";state)"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 6 #"return"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"        )      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"callmain"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"perform_func"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"'"
0 0 14 3 4 #"main"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"main"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 31 #";(set_func_scope (itemn line 2)"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 14 #";(cons '(()())"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 17 #"set_formal_params"
0 0 24 3 1 #" "
0 0 17 3 34 #";we evaluate the formal parameters"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"main"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 5 #"state"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"unbox"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"main"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 17 3 2 #";)"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 7 #";state)"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"        )      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #";running the body of func, it would create a new frame of state and "
 #"pop off when finishing"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"perform_func"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 17 #"func_blockhandler"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"name"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"body"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 22 #"; (cons '(()()) state)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 5 #"state"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 21 #";(cons '(()()) state)"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"break error\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"continue error\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"throw error\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 6 #"return"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";help function that counts number of element in a list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"howmany"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"foldl"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 4 #"))  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"set_formal_params"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 7 #"formals"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 9 #"funcscope"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"formals"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 7 #"(()()) "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 17 3 51 #";no parameter operation involved, just pass through"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"howmany"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 3 #") ("
0 0 14 3 7 #"howmany"
0 0 24 3 1 #" "
0 0 14 3 7 #"formals"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 17 #"set_formal_params"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"arguments error\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"formals"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 14 #"m_manual_state"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"formals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 9 #"funcscope"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          ) "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 14 #"m_manual_state"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"formals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"m_value"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 17 #"set_formal_params"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"formals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 5 #"state"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 9 #"funcscope"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          ))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"inscope?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 12 #"entirestates"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getfirstlayer"
0 0 24 3 1 #" "
0 0 14 3 12 #"entirestates"
0 0 24 3 3 #")) "
0 0 19 3 11 #"\"undefined\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 108
(
 #";-------------------------------------------------------------------"
 #"----------------------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 107
(
 #";----------------------------------------------class----------------"
 #"---------------------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 108
(
 #";-------------------------------------------------------------------"
 #"----------------------------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; (class class_name extends body)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"m_declare_class"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"m_declare_func"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
